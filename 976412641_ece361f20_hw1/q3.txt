3.A

  1 #include<stdio.h>
  2 #include<stdlib.h>
  3
  4 void split_date(int day_of_year, int year, int * month, int * day){
  5     int m = 0;// keep count on what the month going to be
	//first i check for if the year going to be a leap year or not 
	//so i know how many date february going to have and once i have 
	//the result i use a for loop to start finding out what month it is by keep minus it 
	//by 30 or 31 or 29, and set it to keep looping till the day is less than 31 or 29. I have a 
	//special if statement that make sure to catch if it going to be a 
	//february or not and minus the day of year by 29 if it do.Then i have 2 conditional statement that 
	//if the month is even then i minus by 30 else if it odd then 31.
  6     if(year % 4 == 0){
  7         for(int i = 1; i < 13 && day_of_year > 29 && day_of_year > 31;i++){
  8             if(i == 2){
  9                 day_of_year = day_of_year - 29;
 10                 m+=1;
 11             }
 12             else{
 13                 if(i % 2 == 1){
 14                     day_of_year = day_of_year - 31;
 15                     m+=1;
 16                 }
 17                 else{
 18                     day_of_year = day_of_year - 30;
 19                     m+=1;
 20                 }
 21             }
 22         }
 23     }
	//this is the same as the other one but this one is for a non leap year which make me minus 28 instead of 29 for 
	//a non leap year.
 24     else{
 25         for(int i = 1; i < 13 && day_of_year > 29 && day_of_year > 31;i++){
 26             if(i == 2){
 27                 day_of_year = day_of_year - 28;
 28                 m+=1;
 29             }
 30             else{
 31                 if(i % 2 == 1){
 32                     day_of_year = day_of_year - 31;
 33                     m+=1;
 34                 }
 35                 else{
 36                     day_of_year = day_of_year - 30;
 37                     m+=1;
 38                 }
 39             }
 40         }
 41     }
 42     int * tempM = &m;
 43     int * tempD = &day_of_year;
 44     *month = *tempM;
 45     *day = *tempD;
 46 }
 47
 48 int main(){
 49     int tempM = 0;
 50     int tempD = 0;
 51     int day = 300;
 52     int year = 2013;
 53     split_date(day,year,&tempM,&tempD);
 54     printf("input for day of year is %d and the year is %d. \n",day,year);
 55     printf("the day is %d and the month is %d \n",tempD,tempM);
 56     return 0;
 57 }


3.B

  1 #include<stdio.h>
  2 #include<stdlib.h>
  3
  4 int * find_largest(int a[],int n){
	//I first set the largest element to the first element in the array. then
	//loop through until i find an element that is bigger than my largest, and if it 
	//it is bigger then I set it as the new largest number and keep looping until
	//there is no more element in the array then i return the largest number back to main.
  5     int largest_one = a[0];
  6     for(int i = 0;i < n;i++){
  7         if(largest_one < a[i])
  8             largest_one = a[i];
  9     }
 10     int * temp = &largest_one;
 11     return temp;
 12 }
 13
 14
 15 int main(){
 16     int array[] = {1,2,5,51,3,4,5,8,4,12};
 17     int num = 6;
 18     int * largest = find_largest(array,num);
 19     printf("The largest number is %d \n",*largest);
 20
 21     return 0;
 22 }
 23
 24
 25

3.C

  1 #include<stdio.h>
  2 #include<stdlib.h>
  3
  4 int * my_alloc(int n_bytes){
  5     int * array = (int*)malloc(n_bytes);//allocate the space for how many bytes you need
	//check to see if the array is NULL if it is then print out a error message
  6     if(array == NULL){
  7         printf("ERROR! malloc() return a NULL pointer, the program will now end \n");
  8         exit(0);
  9     }
 10     return array;
 11 }
 12 int main(){
 13     int byte = 0;
 14     printf("how many bytes do you want: ");
 15     scanf("%d",&byte);
 16     int * address = my_alloc(byte);
 17     printf("the address of the malloc that just been allocate is ");
 18     printf("%p \n",address);
 19     return 0;
 20 }
 21 
 22 
 23




